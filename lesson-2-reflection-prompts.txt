What happens when you initialize a repository? Why do you need to do it?

	A file ".git" is then created which includes metadata of configuration parameters about the repository.

	I need to do this because version control comes after commits and commits comes after repository.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

	The working directory includes all files while the staging just refers to files which have been "git added", which allows me to control the commit content more flexibly.

How can you use the staging area to make sure you have one commit per logical
change?

	This can be done in several steps:
	1. Run the current project in the working directory to confirm that the current project contains the logical change.
	2. use git diff command to check that the current project and the one in the staging area are different in just one logical change.
	3. Add related files associated with the logical change to the staging area using git add [file]
	4. Run git diff --stage command to confirm that the most recent commit differs from the staging commit just by one logical change.
	5. Run git commit.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

How do the diagrams help you visualize the branch structure?

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?
